/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

#ifndef _PERIPHERALS_H_
#define _PERIPHERALS_H_

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "fsl_common.h"
#include "fsl_gpio.h"
#include "fsl_port.h"
#include "fsl_uart.h"
#include "fsl_clock.h"
#include "fsl_i2c.h"
#include "fsl_dspi.h"
#include "fsl_adc16.h"
#include "fsl_edma.h"
#include "fsl_dmamux.h"
#include "fsl_sai.h"
#include "fsl_sai_edma.h"

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

/***********************************************************************************************************************
 * Definitions
 **********************************************************************************************************************/
/* Definitions for BOARD_InitBUTTONsPeripheral functional group */
/* Alias for GPIOB peripheral */
#define BOARD_SW3_GPIO GPIOB
/* Alias for PORTB */
#define BOARD_SW3_PORT PORTB
/* SW3 interrupt vector ID (number). */
#define BOARD_SW3_IRQN PORTB_IRQn
/* SW3 interrupt handler identifier. */
#define BOARD_SW3_IRQHANDLER PORTB_IRQHandler
/* Alias for GPIOC peripheral */
#define BOARD_SW2_GPIO GPIOC
/* Alias for PORTC */
#define BOARD_SW2_PORT PORTC
/* SW2 interrupt vector ID (number). */
#define BOARD_SW2_IRQN PORTC_IRQn
/* SW2 interrupt handler identifier. */
#define BOARD_SW2_IRQHANDLER PORTC_IRQHandler

/* Definitions for BOARD_InitLEDsPeripheral functional group */
/* Alias for GPIOD peripheral */
#define BOARD_LEDRGB_BLUE_GPIO GPIOD
/* Alias for GPIOA peripheral */
#define BOARD_LEDRGB_RED_GREEN_GPIO GPIOA

/* Definitions for BOARD_InitDEBUG_UARTPeripheral functional group */
/* Definition of peripheral ID */
#define BOARD_DEBUG_UART_PERIPHERAL UART1
/* Definition of the clock source frequency */
#define BOARD_DEBUG_UART_CLOCK_SOURCE CLOCK_GetFreq(UART1_CLK_SRC)

/* Definitions for BOARD_InitACCELPeripheral functional group */
/* BOARD_InitACCELPeripheral defines for I2C0 */
/* Definition of peripheral ID */
#define BOARD_ACCEL_I2C_PERIPHERAL I2C0
/* Definition of the clock source */
#define BOARD_ACCEL_I2C_CLOCK_SOURCE I2C0_CLK_SRC
/* Definition of the clock source frequency */
#define BOARD_ACCEL_I2C_CLK_FREQ CLOCK_GetFreq(BOARD_ACCEL_I2C_CLOCK_SOURCE)
/* Alias for GPIOD peripheral */
#define BOARD_ACCEL_INT_GPIO GPIOD

/* Definitions for BOARD_InitSDHCPeripheral functional group */
/* Alias for GPIOB peripheral */
#define BOARD_SDHC_DETECT_GPIO GPIOB
/* BOARD_InitSDHCPeripheral defines for SPI0 */
/* Definition of peripheral ID */
#define BOARD_SDHC_PERIPHERAL SPI0
/* Definition of the clock source */
#define BOARD_SDHC_CLOCK_SOURCE DSPI0_CLK_SRC
/* Definition of the clock source frequency */
#define BOARD_SDHC_CLK_FREQ CLOCK_GetFreq(BOARD_SDHC_CLOCK_SOURCE)

/* Definitions for BOARD_InitPOTPeripheral functional group */
/* Alias for ADC0 peripheral */
#define BOARD_POTENTIOMETER_PERIPHERAL ADC0
/* POTENTIOMETER interrupt vector ID (number). */
#define BOARD_POTENTIOMETER_IRQN ADC0_IRQn
/* POTENTIOMETER interrupt handler identifier. */
#define BOARD_POTENTIOMETER_IRQHANDLER ADC0_IRQHandler

/* Definitions for BOARD_InitLSENSEPeripheral functional group */
/* Alias for ADC0 peripheral */
#define BOARD_LSENSE_PERIPHERAL ADC0
/* LSENSE interrupt vector ID (number). */
#define BOARD_LSENSE_IRQN ADC0_IRQn
/* LSENSE interrupt handler identifier. */
#define BOARD_LSENSE_IRQHANDLER ADC0_IRQHandler

/* Definitions for BOARD_InitAUDIOPeripheral functional group */
/* Used DMA device. */
#define EDMA_DMA_BASEADDR DMA0
/* Associated DMAMUX device that is used for muxing of requests. */
#define EDMA_DMAMUX_BASEADDR DMAMUX
/* BOARD_InitAUDIOPeripheral defines for I2C0 */
/* Definition of peripheral ID */
#define I2C_AC_PERIPHERAL I2C0
/* Definition of the clock source */
#define I2C_AC_CLOCK_SOURCE I2C0_CLK_SRC
/* Definition of the clock source frequency */
#define I2C_AC_CLK_FREQ CLOCK_GetFreq(I2C_AC_CLOCK_SOURCE)
/* Definition of peripheral ID */
#define SAI_AC_PERIPHERAL I2S0
/* Master clock source frequency used for counting the master clock divider in the Tx SetFormat type functions, not available on all devices. */
#define SAI_AC_TX_MCLK_SOURCE_CLOCK_HZ 120000000UL
/* Master clock source frequency used for counting the master clock divider in the Rx SetFormat type functions, not available on all devices. */
#define SAI_AC_RX_MCLK_SOURCE_CLOCK_HZ 120000000UL
/* Bit clock source frequency used for counting the bit clock divider in the Tx SetFormat type functions. */
#define SAI_AC_TX_BCLK_SOURCE_CLOCK_HZ 11289600UL
/* Bit clock source frequency used for counting the bit clock divider in the Tx SetFormat type functions, this is used when sync mode with Rx part is selected. */
#define SAI_AC_RX_BCLK_SOURCE_CLOCK_HZ SAI_AC_TX_BCLK_SOURCE_CLOCK_HZ
/* SAI_AC eDMA source request. */
#define SAI_AC_TX_DMA_REQUEST kDmaRequestMux0I2S0Tx
/* Selected eDMA channel number. */
#define SAI_AC_TX_DMA_CHANNEL 1
/* DMAMUX device that is used for muxing of the request. */
#define SAI_AC_TX_DMAMUX_BASEADDR DMAMUX
/* Used DMA device. */
#define SAI_AC_TX_DMA_BASEADDR DMA0
/* SAI_AC eDMA source request. */
#define SAI_AC_RX_DMA_REQUEST kDmaRequestMux0I2S0Rx
/* Selected eDMA channel number. */
#define SAI_AC_RX_DMA_CHANNEL 0
/* DMAMUX device that is used for muxing of the request. */
#define SAI_AC_RX_DMAMUX_BASEADDR DMAMUX
/* Used DMA device. */
#define SAI_AC_RX_DMA_BASEADDR DMA0

/***********************************************************************************************************************
 * Global variables
 **********************************************************************************************************************/
extern const uart_config_t BOARD_DEBUG_UART_config;
extern const i2c_master_config_t BOARD_ACCEL_I2C_config;
extern const dspi_master_config_t BOARD_SDHC_config;
extern adc16_channel_config_t BOARD_POTENTIOMETER_channelsConfig[1];
extern const adc16_config_t BOARD_POTENTIOMETER_config;
extern const adc16_channel_mux_mode_t BOARD_POTENTIOMETER_muxMode;
extern const adc16_hardware_average_mode_t BOARD_POTENTIOMETER_hardwareAverageMode;
extern adc16_channel_config_t BOARD_LSENSE_channelsConfig[1];
extern const adc16_config_t BOARD_LSENSE_config;
extern const adc16_channel_mux_mode_t BOARD_LSENSE_muxMode;
extern const adc16_hardware_average_mode_t BOARD_LSENSE_hardwareAverageMode;
extern const edma_config_t eDMA_config;
extern const i2c_master_config_t I2C_AC_config;
extern const sai_config_t SAI_AC_tx_config;
extern sai_transfer_format_t SAI_AC_tx_format;
extern sai_config_t SAI_AC_rx_config;
extern sai_transfer_format_t SAI_AC_rx_format;
extern edma_handle_t SAI_AC_txHandle;
extern edma_handle_t SAI_AC_rxHandle;
extern sai_edma_handle_t SAI_eDMA_txHandle;
extern sai_edma_handle_t SAI_eDMA_rxHandle;

/***********************************************************************************************************************
 * Callback functions
 **********************************************************************************************************************/
/* SAI transfer Rx callback function for the SAI_AC component (init. function BOARD_InitAUDIOPeripheral)*/
extern void SAI_eDMA_rxCallback(I2S_Type *base, sai_edma_handle_t *handle, status_t status, void *userData);

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/
void BOARD_InitPeripherals(void);
void BOARD_InitBUTTONsPeripheral(void);
void BOARD_InitLEDsPeripheral(void);
void BOARD_InitDEBUG_UARTPeripheral(void);
void BOARD_InitACCELPeripheral(void);
void BOARD_InitSDHCPeripheral(void);
void BOARD_InitPOTPeripheral(void);
void BOARD_InitLSENSEPeripheral(void);
void BOARD_InitAUDIOPeripheral(void);

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void);

#if defined(__cplusplus)
}
#endif

#endif /* _PERIPHERALS_H_ */
